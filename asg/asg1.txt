
Hints: Use a variable divisor to determine whether a core should send its sum or receive and add. The divisor should start with the value 2 and be doubled after each iteration. Also use a variable core difference to deter- mine which core should be partnered with the current core. It should start with the value 1 and also be doubled after each iteration. For example, in the ?rst iteration 0 % divisor = 0 and 1 % divisor = 1, so 0 receives and adds, while 1 sends. Also in the ?first iteration 0 + core difference = 1 and 1 - core difference = 0, so 0 and 1 are paired in the ?first iteration.

1.3 
Try to write pseudo-code for the tree-structured global sum illustrated in Figure 1.1. Assume the number of cores is a power of two (1, 2, 4, 8, ...).

x = 2
core_diff = 1

while (NumberOfCores > 1)

iteration from index 1 to last index, multiply index by 2 every loop
for(index = 1; index < last; index = index * 2)
{

core_diff = [ [(index * 2) - (index)] * core_diff ] + 1

if  [ [index % x] % 2 == 0 ], sends value

if  [ [index % x] % 2 != 0 ]  and [ core_diff % 5 == 0 ], receives adds value

x = x * 2
core_diff = core_diff * 2

}

NumberOfCores = NumberOfCores / 2


1.6 
 Derive formulas for the number of receives and additions that core 0 carries out using a, b.
Make a table showing the numbers of receives and additions carried out by core 0 when the two sums are used with 2,4,8,...,1024 cores. 

a. the original pseudo-code for a global sum

core_0 receives = n - 1 
core_0 additions = n - 1 

receives	additions	cores
			                 
	1		   1              2
	3		   3              4
	7		   7              8
	...		   ...             ...
	1023		   1023             1024

b. the tree-structured global sum. 
core_0 receives, floor 2^x = n 
core_0 additions, floor 2^x = n 

  	receives	additions	cores
			                 
	1		   1              2
	2		   2              4
	4		   3              8
	...		   ...             ...
	10		   10             1024